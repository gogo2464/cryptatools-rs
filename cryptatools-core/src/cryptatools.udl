namespace cryptatools {
    sequence<sequence<u8>> split_bytes_by_characters_representation([ByRef]Alphabet encoding, sequence<u8> text);
    sequence<u8> uniffy_opcode_group(sequence<sequence<u8>> text);
};

dictionary Encoding {
    string str;
    sequence<u8> bytes;
};

interface Alphabet {
    constructor(sequence<Encoding> encoding);
    [Name=new_empty]
    constructor();
    [Name=full_hexadecimal_alphabet]
    constructor();
    sequence<Encoding> get_encoding();
};

interface CaesarNumberAlgorithm {
    constructor(Alphabet alphabet);
    sequence<u8> encrypt_by_opcode_shift(sequence<u8> plain_text, u32 key);
    sequence<u8> encrypt_by_alphabet_shift(sequence<u8> plain_text, u32 key);
};

interface ColumnarTranspositionAlgorithm {
    constructor(Alphabet alphabet);
    sequence<u8> encrypt(sequence<u8> plain_text, u32 key);
    sequence<u8> decrypt(sequence<u8> cipher_text, u32 key);
};

interface CoincidenceIndexGuesser {
    constructor(Alphabet alphabet);
    double guess_coincidence_index(sequence<u8> cipher_text_input);
    double guess_coincidence_index_statistics_from_file(string file_name);
};

interface BirthdayParadox {
    constructor(Alphabet alphabet);
    u64 calculate_birthday_paradox_expecting_percent_focusing_on_precision(sequence<u8> hash_to_process, f64 probability_expectation);
    f64 calculate_birthday_paradox_expecting_percent_focusing_on_speed_with_taylor(sequence<u8> hash_to_process, f64 probability_expectation);
};