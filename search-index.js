var searchIndex = new Map(JSON.parse('[["cryptatools_core",{"t":"CCCCCCCCCCCCCCCCCCCCFNNNNNNNNNNNNNNNNNNCJFNNNNNNNNNNNNNNNNNNCFNNNNNNNNNNNNNNNNNCFNNNNNNNNNNNNNNNNNNNNNCCFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNCCCCCCCFONNNNNNNNNNNNNNNNNNNCFFOONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNCFNNNNNNNNNNNNNNNNNNCCCCFFSSNNNNNNONNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNHONNNNNNNNHNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["cryptanalysis","cryptography","utils","common","custom","plain_text_detector","rsa","common_modulus_attack","chosen_plain_text_attacks","general_cryptanalysis_methods","know_plaintext_attacks","brute_force","frequency_analysis","hash_cryptanalysis","caesar_number","coincidence_index","distribution_algorithms","engine","modules","coincidence_index","CoincidenceIndexGuesser","borrow","borrow_mut","clone_handle","consume_handle","deref","deref_mut","drop","from","guess_coincidence_index","guess_coincidence_index_statistics_from_file","init","into","new","new_handle","try_from","try_into","type_id","vzip","vigenere_coincidence_index","ENGLISH_DEFAULT_COINCIDENCE_INDEX","VigenereCoincidenceIndexGenerator","borrow","borrow_mut","clone_handle","consume_handle","deref","deref_mut","drop","from","generate_coincidence_index_for_key","generate_coincidence_index_for_key_from_file","init","into","new","new_handle","try_from","try_into","type_id","vzip","statistical","Statistical","borrow","borrow_mut","clone_handle","consume_handle","deref","deref_mut","drop","from","guess_statistical_distribution","init","into","new","new_handle","try_from","try_into","type_id","vzip","birthday_paradox","BirthdayParadox","borrow","borrow_mut","calculate_birthday_paradox","calculate_birthday_paradox_expecting_percent_focusing_on_precision","calculate_birthday_paradox_expecting_percent_focusing_on_speed_with_taylor","calculate_permuted_choice_number","clone_handle","consume_handle","deref","deref_mut","drop","factorial","from","init","into","new","new_handle","try_from","try_into","type_id","vzip","matsui_s_algorithm","algorithm_one","AlgorithmOne","borrow","borrow_mut","clone_handle","consume_handle","deref","deref_mut","drop","from","init","into","new","new_handle","solve","try_from","try_into","type_id","vzip","PlainTextDetector","borrow","borrow_mut","catch_confidence_values","clone_handle","consume_handle","deref","deref_mut","detect_language","drop","from","init","into","is_plain_text","new","new_handle","try_from","try_into","type_id","vzip","classical","modern","encryption","monoalphabetic_ciphers","polyalphabetic_ciphers","transpositional_ciphers","caesar_number","CaesarNumberAlgorithm","alphabet","borrow","borrow_mut","clone_handle","consume_handle","decrypt_by_opcode_shift","deref","deref_mut","drop","encrypt_by_alphabet_shift","encrypt_by_opcode_shift","from","init","into","new","new_handle","try_from","try_into","type_id","vzip","vigenere","Vigenere","VigenereNoTable","alphabet","","borrow","","borrow_mut","","clone_handle","","consume_handle","","deref","","deref_mut","","drop","","encrypt","","from","","init","","into","","new","","new_handle","","sorted_alphabet","try_from","","try_into","","type_id","","vigenere_table","vzip","","columnar_transposition","ColumnarTranspositionAlgorithm","borrow","borrow_mut","clone_handle","consume_handle","decrypt","deref","deref_mut","drop","encrypt","from","init","into","new","new_handle","try_from","try_into","type_id","vzip","encoding","encryption","alphabets","convert","Alphabet","Encoding","PRINTABLE","UU_ENCODING_ALPHABET","ascii_encoding","ascii_printable_only_encoding","borrow","","borrow_mut","","bytes","clone","","clone_handle","","clone_into","","clone_to_uninit","","consume_handle","","decode","deref","","deref_mut","","drop","","encoding","eq","equivalent","","extended_ascii_encoding","fmt","from","","full_hexadecimal_alphabet","get_encoding","hexadecimal_ascii_lowercase_sixteen_bits_alphabet","init","","intel_x86_32_encoding","into","","new","new_empty","new_handle","","pokered_charset_encoding","split_bytes_by_characters_representation","str","to_owned","","try_from","","try_into","","type_id","","uniffy_opcode_group","unknow_opcodes","uppercase_no_space_ascii_alphabet_encoding","vzip","","Decode","Encode","borrow","","borrow_mut","","clone_handle","","consume_handle","","deref","","deref_mut","","drop","","encode","from","","from_ascii_to_u8","from_u8_to_ascii","init","","into","","new_handle","","try_from","","try_into","","type_id","","vzip",""],"q":[[0,"cryptatools_core"],[3,"cryptatools_core::cryptanalysis"],[6,"cryptatools_core::cryptanalysis::common"],[7,"cryptatools_core::cryptanalysis::common::rsa"],[8,"cryptatools_core::cryptanalysis::custom"],[11,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods"],[14,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::brute_force"],[15,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis"],[17,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::coincidence_index"],[19,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::coincidence_index::engine"],[20,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::coincidence_index::engine::coincidence_index"],[39,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::coincidence_index::modules"],[40,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::coincidence_index::modules::vigenere_coincidence_index"],[60,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::distribution_algorithms"],[61,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::frequency_analysis::distribution_algorithms::statistical"],[79,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::hash_cryptanalysis"],[80,"cryptatools_core::cryptanalysis::custom::general_cryptanalysis_methods::hash_cryptanalysis::birthday_paradox"],[102,"cryptatools_core::cryptanalysis::custom::know_plaintext_attacks"],[103,"cryptatools_core::cryptanalysis::custom::know_plaintext_attacks::matsui_s_algorithm"],[104,"cryptatools_core::cryptanalysis::custom::know_plaintext_attacks::matsui_s_algorithm::algorithm_one"],[122,"cryptatools_core::cryptanalysis::plain_text_detector"],[142,"cryptatools_core::cryptography"],[144,"cryptatools_core::cryptography::classical"],[145,"cryptatools_core::cryptography::classical::encryption"],[148,"cryptatools_core::cryptography::classical::encryption::monoalphabetic_ciphers"],[149,"cryptatools_core::cryptography::classical::encryption::monoalphabetic_ciphers::caesar_number"],[170,"cryptatools_core::cryptography::classical::encryption::polyalphabetic_ciphers"],[171,"cryptatools_core::cryptography::classical::encryption::polyalphabetic_ciphers::vigenere"],[211,"cryptatools_core::cryptography::classical::encryption::transpositional_ciphers"],[212,"cryptatools_core::cryptography::classical::encryption::transpositional_ciphers::columnar_transposition"],[231,"cryptatools_core::cryptography::modern"],[233,"cryptatools_core::utils"],[235,"cryptatools_core::utils::alphabets"],[299,"cryptatools_core::utils::convert"],[334,"uniffi_core::ffi::handle"],[335,"alloc::sync"],[336,"alloc::vec"],[337,"alloc::string"],[338,"core::result"],[339,"core::any"],[340,"once_cell::sync"],[341,"std::collections::hash::map"],[342,"lingua::language"],[343,"core::option"],[344,"bimap::btree"],[345,"core::fmt"]],"i":"`````````````````````n00000000000000000```B`00000000000000000``Bb0000000000000000``Bf00000000000000000000```Bj0000000000000000`Bl000000000000000000````````Cf0000000000000000000```CjCl101010101010101010101010100101010110``Cn00000000000000000````````Ah0D`101001010101011010101100010011110110111011`001010101`1101``DhDj1010101010100100110101010101010","f":"`````````````````````{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}{cc{}}{{{b{n}}{Ab{A`}}}Ad}{{{b{n}}Af}Ad}{{}j}{{}c{}}{{{h{Ah}}}n}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}`{{}An}`{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}{cc{}}{{{b{B`}}j{Ab{A`}}}Ad}{{{b{B`}}jAf}Ad}{{}j}{{}c{}}{{{h{Ah}}}B`}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}{cc{}}{{{b{Bb}}{Ab{A`}}}{{Bd{{Ab{A`}}Ad}}}}{{}j}{{}c{}}{AhBb}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{{{b{Bf}}BhBh}Bh}{{{b{Bf}}{Ab{A`}}Ad}Bh}{{{b{Bf}}{Ab{A`}}Ad}Ad}2{ff}{f{{h{c}}}{}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}{{{b{Bf}}Bh}Bh}{cc{}}{{}j}{{}c{}}{{{h{Ah}}}Bf}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}```{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}?>={AhBj}<{{}l}<;:9`87{{BlAf{Ab{Bn}}}{{Cb{{Ab{{C`{BnAd}}}}}}}}7654{{BlAf{Ab{Bn}}}{{Cb{Bn}}}}4{cc{}}{{}j}{{}c{}}{{BlAf{Ab{Bn}}Ad}Cd}{{}Bl}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}````````{Cfh}{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{{{b{Cf}}{Ab{A`}}Ch}{{Ab{A`}}}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}33{cc{}}{{}j}{{}c{}}{{{h{Ah}}}Cf}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}```{CjAh}{Clh}{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{ff}0{f{{h{c}}}{}}0{j{{b{c}}}{}}0{j{{b{dc}}}{}}0{jl}0{{{b{Cj}}{Ab{A`}}{Ab{{Ab{A`}}}}}{{Ab{A`}}}}{{{b{Cl}}{Ab{A`}}{Ab{{Ab{A`}}}}}{{Ab{A`}}}}{cc{}}0{{}j}0{{}c{}}0{AhCj}{{{h{Ah}}}Cl}{{{h{c}}}f{}}0{ClAb}{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{bAl}0{CjAb}{{}c{}}0``{b{{b{c}}}{}}{{{b{d}}}{{b{dc}}}{}}{ff}{f{{h{c}}}{}}{{{b{Cn}}{Ab{A`}}Ch}{{Ab{A`}}}}{j{{b{c}}}{}}{j{{b{dc}}}{}}{jl}3{cc{}}{{}j}{{}c{}}{{{h{Ah}}}Cn}{{{h{c}}}f{}}{c{{Aj{e}}}{}{}}{{}{{Aj{c}}}{}}{bAl}{{}c{}}``````{{}b}0{{{b{dAh}}}Ah}0{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{D`Ab}{{{b{D`}}}D`}{{{b{Ah}}}Ah}{ff}0{{b{b{dc}}}l{}}0{{bA`}l}0{f{{h{c}}}{}}0{{{b{Ah}}{Ab{A`}}}{{Ab{D`}}}}{j{{b{c}}}{}}0{j{{b{dc}}}{}}0{jl}0{AhDb}{{{b{D`}}{b{D`}}}Cd}{{b{b{c}}}Cd{}}0{{{b{dAh}}}Ah}{{{b{D`}}{b{dDd}}}Df}{cc{}}0{{}Ah}{{{b{Ah}}}{{Ab{D`}}}}1{{}j}05{{}c{}}0{{{Ab{D`}}}Ah}4{{{h{c}}}f{}}08{{{b{Ah}}{Ab{A`}}}{{Ab{{Ab{A`}}}}}}{D`Af}{bc{}}0{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{bAl}0{{{Ab{{Ab{A`}}}}}{{Ab{A`}}}}??{{}c{}}0``{b{{b{c}}}{}}0{{{b{d}}}{{b{dc}}}{}}0{ff}0{f{{h{c}}}{}}0{j{{b{c}}}{}}0{j{{b{dc}}}{}}0{jl}0{{{b{Ah}}Af}{{Ab{A`}}}}{cc{}}0{Af{{Ab{A`}}}}{{{Ab{A`}}}Af}{{}j}0{{}c{}}0{{{h{c}}}f{}}0{c{{Aj{e}}}{}{}}0{{}{{Aj{c}}}{}}0{bAl}0{{}c{}}0","D":"Gl","p":[[1,"reference",null,null,1],[0,"mut"],[5,"Handle",334],[5,"Arc",335,null,1],[1,"usize"],[1,"unit"],[5,"CoincidenceIndexGuesser",20],[1,"u8"],[5,"Vec",336],[1,"f64"],[5,"String",337],[5,"Alphabet",235],[6,"Result",338,null,1],[5,"TypeId",339],[5,"Lazy",340],[5,"VigenereCoincidenceIndexGenerator",40],[5,"Statistical",61],[5,"HashMap",341],[5,"BirthdayParadox",80],[1,"u64"],[5,"AlgorithmOne",104],[5,"PlainTextDetector",122],[6,"Language",342],[1,"tuple",null,null,1],[6,"Option",343,null,1],[1,"bool"],[5,"CaesarNumberAlgorithm",149],[1,"u32"],[5,"Vigenere",171],[5,"VigenereNoTable",171],[5,"ColumnarTranspositionAlgorithm",212],[5,"Encoding",235],[5,"BiBTreeMap",344],[5,"Formatter",345],[8,"Result",345],[5,"Decode",299],[5,"Encode",299]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABABKAAAAAMABgACAAoAAAAMABAAIAAAACIADwA1AAAANwAOAEgAAABKAAoAWAAEAF8AAABhAA8AcgAAAHQACQB/AAMAhAAAAIYAAACJAAsAlgAAAJgAAwCdAAIAowAAAKUAGAC/AAAAwgABAMYAEwDbAAIA4AAAAOIADgDyAA4AAgEFAAkBAgANAQAAEQEAABMBAgAYAQ8AKQESAEEBAQBFAQkA","P":[[21,"T"],[23,""],[24,"T"],[27,""],[28,"T"],[29,""],[32,"U"],[33,""],[34,"T"],[35,"U,T"],[36,"U"],[37,""],[38,"V"],[40,""],[42,"T"],[44,""],[45,"T"],[48,""],[49,"T"],[50,""],[53,"U"],[54,""],[55,"T"],[56,"U,T"],[57,"U"],[58,""],[59,"V"],[62,"T"],[64,""],[65,"T"],[68,""],[69,"T"],[70,""],[72,"U"],[73,""],[74,"T"],[75,"U,T"],[76,"U"],[77,""],[78,"V"],[81,"T"],[83,""],[88,"T"],[91,""],[93,"T"],[94,""],[95,"U"],[96,""],[97,"T"],[98,"U,T"],[99,"U"],[100,""],[101,"V"],[105,"T"],[107,""],[108,"T"],[111,""],[112,"T"],[113,""],[114,"U"],[115,""],[116,"T"],[117,""],[118,"U,T"],[119,"U"],[120,""],[121,"V"],[123,"T"],[125,""],[127,"T"],[130,""],[132,"T"],[133,""],[134,"U"],[135,""],[137,"T"],[138,"U,T"],[139,"U"],[140,""],[141,"V"],[150,""],[151,"T"],[153,""],[154,"T"],[155,""],[156,"T"],[158,""],[161,"T"],[162,""],[163,"U"],[164,""],[165,"T"],[166,"U,T"],[167,"U"],[168,""],[169,"V"],[173,""],[175,"T"],[179,""],[181,"T"],[187,""],[191,"T"],[193,""],[195,"U"],[197,""],[199,"T"],[201,""],[202,"U,T"],[204,"U"],[206,""],[209,"V"],[213,"T"],[215,""],[216,"T"],[217,""],[218,"T"],[220,""],[222,"T"],[223,""],[224,"U"],[225,""],[226,"T"],[227,"U,T"],[228,"U"],[229,""],[230,"V"],[237,""],[241,"T"],[245,""],[250,"T"],[252,""],[254,"T"],[256,""],[257,"T"],[261,""],[265,"K"],[267,""],[269,"T"],[271,""],[277,"U"],[279,""],[281,"T"],[283,""],[286,"T"],[288,"U,T"],[290,"U"],[292,""],[297,"V"],[301,"T"],[305,""],[307,"T"],[313,""],[316,"T"],[318,""],[322,"U"],[324,"T"],[326,"U,T"],[328,"U"],[330,""],[332,"V"]]}],["uniffi_bindgen",{"t":"H","n":["main"],"q":[[0,"uniffi_bindgen"]],"i":"`","f":"{{}b}","D":"`","p":[[1,"unit"]],"r":[],"b":[],"c":"OjAAAAAAAAA=","e":"OjAAAAEAAAAAAAEAEAAAAAAAAQA=","P":[]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[13027,189]}