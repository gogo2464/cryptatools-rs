var searchIndex = JSON.parse('{\
"cryptatools_core":{"doc":"","t":"AAAAAAAAAAAAADDHLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADLLLLLLLLLLLLLLADLLLLLLLLLLLLLLLLLLAADLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLAAAAAAADMLLLLLLLLLLLLLLLLADDMMLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLADLLLLLLLLLLLLLLLAAAADDRRLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLFMLLLLLLLLFLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["cryptanalysis","cryptography","utils","chosen_plain_text_attacks","general_cryptanalysis_methods","know_plaintext_attacks","plain_text_detector","brute_force","frequency_analysis","hash_cryptanalysis","caesar_number","coincidence_index","distribution_algorithms","CoincidenceIndexGenerator","CoincidenceIndexGuesser","ENGLISH_DEFAULT_COINCIDENCE_INDEX","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","generate_coincidence_index_for_key","generate_coincidence_index_for_key_from_file","guess_coincidence_index","guess_coincidence_index_statistics_from_file","init","init","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","statistical","Statistical","borrow","borrow_mut","deref","deref_mut","drop","from","guess_statistical_distribution","init","into","new","try_from","try_into","type_id","vzip","birthday_paradox","BirtdayParadox","borrow","borrow_mut","calculate_birtday_paradox","calculate_birtday_paradox_expecting_percent_focusing_on_precision","calculate_birtday_paradox_expecting_percent_focusing_on_speed_with_taylor","calculate_permuted_choice_number","deref","deref_mut","drop","factorial","from","init","into","new","try_from","try_into","type_id","vzip","matsui_s_algorithm","algorithm_one","AlgorithmOne","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","solve","try_from","try_into","type_id","vzip","PlainTextDetector","borrow","borrow_mut","catch_confidence_values","deref","deref_mut","detect_language","drop","from","init","into","is_plain_text","new","try_from","try_into","type_id","vzip","classical","modern","encryption","monoalphabetic_ciphers","polyalphabetic_ciphers","transpositional_ciphers","caesar_number","CaesarNumberAlgorithm","alphabet","borrow","borrow_mut","decrypt_by_opcode_shift","deref","deref_mut","drop","encrypt_by_alphabet_shift","encrypt_by_opcode_shift","from","init","into","new","try_from","try_into","type_id","vzip","vigenere","Vigenere","VigenereNoTable","alphabet","alphabet","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","encrypt","encrypt","from","from","init","init","into","into","new","new","sorted_alphabet","try_from","try_from","try_into","try_into","type_id","type_id","vigenere_table","vzip","vzip","columnar_transposition","ColumnarTranspositionAlgorithm","borrow","borrow_mut","decrypt","deref","deref_mut","drop","encrypt","from","init","into","new","try_from","try_into","type_id","vzip","encoding","encryption","alphabets","convert","Alphabet","Encoding","PRINTABLE","UU_ENCODING_ALPHABET","ascii_encoding","ascii_printable_only_encoding","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","decode","deref","deref","deref_mut","deref_mut","drop","drop","encoding","eq","equivalent","extended_ascii_encoding","fmt","from","from","full_hexadecimal_alphabet","get_encoding","hexadecimal_ascii_lowercase_sixteen_bits_alphabet","init","init","intel_x86_32_encoding","into","into","new","new_empty","pokered_charset_encoding","split_bytes_by_characters_representation","str","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uniffy_opcode_group","unknow_opcodes","uppercase_no_space_ascii_alphabet_encoding","vzip","vzip","Decode","Encode","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","encode","from","from","from_ascii_to_u8","from_u8_to_ascii","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"cryptatools_core"],[3,"cryptatools_core::cryptanalysis"],[7,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods"],[10,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::brute_force"],[11,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::frequency_analysis"],[13,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::frequency_analysis::coincidence_index"],[46,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::frequency_analysis::distribution_algorithms"],[47,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::frequency_analysis::distribution_algorithms::statistical"],[62,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::hash_cryptanalysis"],[63,"cryptatools_core::cryptanalysis::general_cryptanalysis_methods::hash_cryptanalysis::birthday_paradox"],[82,"cryptatools_core::cryptanalysis::know_plaintext_attacks"],[83,"cryptatools_core::cryptanalysis::know_plaintext_attacks::matsui_s_algorithm"],[84,"cryptatools_core::cryptanalysis::know_plaintext_attacks::matsui_s_algorithm::algorithm_one"],[99,"cryptatools_core::cryptanalysis::plain_text_detector"],[116,"cryptatools_core::cryptography"],[118,"cryptatools_core::cryptography::classical"],[119,"cryptatools_core::cryptography::classical::encryption"],[122,"cryptatools_core::cryptography::classical::encryption::monoalphabetic_ciphers"],[123,"cryptatools_core::cryptography::classical::encryption::monoalphabetic_ciphers::caesar_number"],[141,"cryptatools_core::cryptography::classical::encryption::polyalphabetic_ciphers"],[142,"cryptatools_core::cryptography::classical::encryption::polyalphabetic_ciphers::vigenere"],[176,"cryptatools_core::cryptography::classical::encryption::transpositional_ciphers"],[177,"cryptatools_core::cryptography::classical::encryption::transpositional_ciphers::columnar_transposition"],[193,"cryptatools_core::cryptography::modern"],[195,"cryptatools_core::utils"],[197,"cryptatools_core::utils::alphabets"],[252,"cryptatools_core::utils::convert"]],"d":["","","","Differential Cryptanalysis","","linear Cryptanalysis","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate coincidence index of a specific key_size choosen …","Generate coincidence index corresponding for a sepcific …","Guess coincidence index of <code>cipher_text_input</code>.","Guess coincidence index of an unencrypted plain text …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Catch statistical distribution (percentage) from a …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Calculate Birthday Paradox from hash. Focus of precision.","Calculate Birthday Paradox from hash in order to get …","Calculate the number of possible choices of <code>objects</code> …","","","","Get number factorial.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","For each <code>languages</code> set, return a tuple with confidence …","","","Detect the language used in a plain text using the …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Detect if plain text if the text correspond to a set of …","","","","","","","","","","","","Encrypt with Caesar shifting encryption algorithm.","","Alphabet used by the caesar number encryption Algotithm.","","","Decrypt the cipher text with the caesar number encryption …","","","","Encrypt the plain text with the caesar number encryption …","Encrypt the plain text with the caesar number encryption …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Encrypt with the Vigenere algorithm.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Decrypt the <code>cipher_text</code> with the columnar transposition …","","","","Encrypt the <code>plain_text</code> with the columnar transposition …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Builder to add encoding to the encoding.","","","","","","","","","","Convert opcodes to an human readable set of characters …","","","","","","","Alphabet encoding.","","","Extended ascii alphabet.","","Returns the argument unchanged.","Returns the argument unchanged.","Full Hexadecimal (0x00-0xff)","","Ascii lowercase hexadecimal alphabet","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Unknow opcodes","","","","","","","","","","","","","","","","Encode the input argument <code>unencoded</code> to a byte according …","Returns the argument unchanged.","Returns the argument unchanged.","Encode a string to a vector of u8 bytes.","Decode a vector of u8 to ascii text string.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,2,7,2,7,2,7,2,7,2,7,2,2,2,7,7,7,2,7,2,7,2,7,2,7,2,7,2,7,2,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,23,24,24,23,24,23,24,23,24,23,23,24,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,0,0,0,0,8,8,26,8,26,8,26,26,8,26,8,8,26,8,26,8,26,8,8,26,26,8,26,26,8,8,8,8,26,8,8,26,8,8,8,8,0,26,26,8,26,8,26,8,26,8,0,8,8,26,8,0,0,29,30,29,30,29,30,29,30,29,30,30,29,30,30,29,29,30,29,30,29,30,29,30,29,30,29,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[]],[[]],[[2,1,[4,[3]]],5],[[2,1,6],5],[[7,[4,[3]]],5],[[7,6],5],[[],1],[[],1],[[]],[[]],[[[9,[8]]],7],[[[9,[8]]],2],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[]],0,0,[[]],[[]],[1],[1],[1],[[]],[[12,[4,[3]]],[[13,[[4,[3]],5]]]],[[],1],[[]],[8,12],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[14,15,15],15],[[14,[4,[3]],5],15],[[14,[4,[3]],5],5],[[14,15,15],15],[1],[1],[1],[[14,15],15],[[]],[[],1],[[]],[[[9,[8]]],14],[[],10],[[],10],[[],11],[[]],0,0,0,[[]],[[]],[1],[1],[1],[[]],[[],1],[[]],[8,16],[[]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],[[17,6,[4,[18]]],[[19,[4]]]],[1],[1],[[17,6,[4,[18]]],[[19,[18]]]],[1],[[]],[[],1],[[]],[[17,6,[4,[18]],5],20],[[],17],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[21,[4,[3]],22],[[4,[3]]]],[1],[1],[1],[[21,[4,[3]],22],[[4,[3]]]],[[21,[4,[3]],22],[[4,[3]]]],[[]],[[],1],[[]],[[[9,[8]]],21],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[23,[4,[3]],[4,[[4,[3]]]]],[[4,[3]]]],[[24,[4,[3]],[4,[[4,[3]]]]],[[4,[3]]]],[[]],[[]],[[],1],[[],1],[[]],[[]],[8,23],[[[9,[8]]],24],0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[[]],[[]],0,0,[[]],[[]],[[25,[4,[3]],22],[[4,[3]]]],[1],[1],[1],[[25,[4,[3]],22],[[4,[3]]]],[[]],[[],1],[[]],[[[9,[8]]],25],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,0,0,0,[8,8],[8,8],[[]],[[]],[[]],[[]],0,[26,26],[8,8],[[]],[[]],[[8,[4,[3]]],[[4,[26]]]],[1],[1],[1],[1],[1],[1],0,[[26,26],20],[[],20],[8,8],[[26,27],28],[[]],[[]],[8,8],[8,[[4,[26]]]],[8,8],[[],1],[[],1],[8,8],[[]],[[]],[[[4,[26]]],8],[[],8],[8,8],[[8,[4,[3]]],[[4,[[4,[3]]]]]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[4,[[4,[3]]]]],[[4,[3]]]],[8,8],[8,8],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[1],[1],[1],[1],[1],[1],[[8,6],[[4,[3]]]],[[]],[[]],[6,[[4,[3]]]],[[[4,[3]]],6],[[],1],[[],1],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[]]],"c":[],"p":[[15,"usize"],[3,"CoincidenceIndexGenerator"],[15,"u8"],[3,"Vec"],[15,"f64"],[3,"String"],[3,"CoincidenceIndexGuesser"],[3,"Alphabet"],[3,"Arc"],[4,"Result"],[3,"TypeId"],[3,"Statistical"],[3,"HashMap"],[3,"BirtdayParadox"],[15,"u64"],[3,"AlgorithmOne"],[3,"PlainTextDetector"],[4,"Language"],[4,"Option"],[15,"bool"],[3,"CaesarNumberAlgorithm"],[15,"u32"],[3,"Vigenere"],[3,"VigenereNoTable"],[3,"ColumnarTranspositionAlgorithm"],[3,"Encoding"],[3,"Formatter"],[6,"Result"],[3,"Decode"],[3,"Encode"]]},\
"uniffi_bindgen":{"doc":"","t":"F","n":["main"],"q":[[0,"uniffi_bindgen"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
